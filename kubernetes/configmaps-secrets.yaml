apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: ${NAMESPACE}
data:
  db_host: "postgres.${NAMESPACE}.svc.cluster.local"
  db_port: "5432"
  db_name: "nba_stats"
  redis_host: "redis.${NAMESPACE}.svc.cluster.local"
  log_level: "info"
  app_env: "production"
  cors_allowed_origins: "${APP_DOMAIN}"
  max_request_size: "10mb"
  cache_ttl_seconds: "300"
  rate_limit_window_ms: "60000"
  rate_limit_max_requests: "120"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: ${NAMESPACE}
data:
  api_url: "https://${APP_DOMAIN}/api"
  app_version: "${APP_VERSION}"
  features_config: |
    {
      "enableTeamComparison": true,
      "enableAdvancedStats": true,
      "enablePredictions": true,
      "enableExports": true,
      "enableHistoricalData": true
    }
  analytics_config: |
    {
      "enableAnalytics": true,
      "analyticsEndpoint": "https://analytics.example.com/collect"
    }
---
# The following are templates that should be populated with actual values
# using a secure method like Kubernetes Secrets or a secrets management tool

# Template for database credentials secret
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: ${NAMESPACE}
type: Opaque
stringData:
  username: "nba_admin"
  password: "${DB_PASSWORD}"
  app_username: "nba_app"
  app_password: "${APP_PASSWORD}"
  readonly_username: "nba_readonly"
  readonly_password: "${READONLY_PASSWORD}"
---
# Template for JWT token secret
apiVersion: v1
kind: Secret
metadata:
  name: jwt-token-secret
  namespace: ${NAMESPACE}
type: Opaque
stringData:
  token: "${JWT_SECRET}"
---
# Template for API credentials secret
apiVersion: v1
kind: Secret
metadata:
  name: api-credentials
  namespace: ${NAMESPACE}
type: Opaque
stringData:
  api_key: "${API_KEY}"
---
# Template for registry credentials
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: ${NAMESPACE}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: "${DOCKER_CONFIG_JSON}" 