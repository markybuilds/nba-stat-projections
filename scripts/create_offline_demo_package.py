#!/usr/bin/env python3
"""
Create Offline Demo Package Script
---------------------------------
This script creates a self-contained offline demo package for the NBA Stats Projections
application. The package includes all necessary static files, screenshots, sample data,
and documentation to conduct a demonstration without an internet connection.

Usage:
    python scripts/create_offline_demo_package.py

The script will create an offline package in the docs/backup/offline_package directory.
"""

import os
import json
import shutil
import time
import zipfile
from datetime import datetime

# Configuration
OUTPUT_DIR = "docs/backup/offline_package"
DOCS_DIR = "docs"
SCRIPTS_DIR = "scripts"
DATA_DIR = "data/samples"
README_FILE = "OFFLINE_DEMO_README.md"

# Define package contents
PACKAGE_CONTENTS = {
    "docs": [
        "DEMO_GUIDE.md",
        "PRESENTATION_TEMPLATE.md",
        "PRESENTATION_SLIDES.md",
        "DEMONSTRATION_SCRIPT.md",
        "DEMONSTRATION_FAQ.md",
        "REHEARSAL_PLAN.md",
        "RECORDING_SETUP.md",
    ],
    "scripts": [
        "setup_demo_env.py",
        "start_api.py",
        "start_frontend.py",
        "validate_demo_env.py",
    ],
    "data": [
        "players.json",
        "teams.json",
    ],
    "screenshots": [
        # These will be generated by the script
        "dashboard.png",
        "players_list.png",
        "player_detail.png",
        "teams_list.png",
        "team_detail.png",
        "projections.png",
        "api_endpoints.png",
        "comparison_tool.png",
        "settings.png",
        "analytics.png",
    ]
}

def create_directory_structure():
    """Create the directory structure for the offline package."""
    print("Creating directory structure...")
    
    # Create main directory
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    # Create subdirectories
    os.makedirs(os.path.join(OUTPUT_DIR, "docs"), exist_ok=True)
    os.makedirs(os.path.join(OUTPUT_DIR, "scripts"), exist_ok=True)
    os.makedirs(os.path.join(OUTPUT_DIR, "data"), exist_ok=True)
    os.makedirs(os.path.join(OUTPUT_DIR, "screenshots"), exist_ok=True)
    
    print("✅ Directory structure created")

def copy_documentation():
    """Copy documentation files to the package."""
    print("Copying documentation files...")
    
    for doc_file in PACKAGE_CONTENTS["docs"]:
        source_path = os.path.join(DOCS_DIR, doc_file)
        dest_path = os.path.join(OUTPUT_DIR, "docs", doc_file)
        
        # Check if source file exists
        if os.path.exists(source_path):
            shutil.copy2(source_path, dest_path)
            print(f"  ✅ Copied {doc_file}")
        else:
            print(f"  ❌ Warning: {source_path} not found")
    
    print("✅ Documentation files copied")

def copy_scripts():
    """Copy script files to the package."""
    print("Copying script files...")
    
    for script_file in PACKAGE_CONTENTS["scripts"]:
        source_path = os.path.join(SCRIPTS_DIR, script_file)
        dest_path = os.path.join(OUTPUT_DIR, "scripts", script_file)
        
        # Check if source file exists
        if os.path.exists(source_path):
            shutil.copy2(source_path, dest_path)
            print(f"  ✅ Copied {script_file}")
        else:
            print(f"  ❌ Warning: {source_path} not found")
    
    print("✅ Script files copied")

def copy_sample_data():
    """Copy sample data files to the package."""
    print("Copying sample data files...")
    
    for data_file in PACKAGE_CONTENTS["data"]:
        source_path = os.path.join(DATA_DIR, data_file)
        dest_path = os.path.join(OUTPUT_DIR, "data", data_file)
        
        # Check if source file exists
        if os.path.exists(source_path):
            shutil.copy2(source_path, dest_path)
            print(f"  ✅ Copied {data_file}")
        else:
            print(f"  ❌ Warning: {source_path} not found")
    
    print("✅ Sample data files copied")

def generate_screenshots():
    """Generate placeholder screenshots for the offline package."""
    print("Generating placeholder screenshots...")
    
    screenshots_dir = os.path.join(OUTPUT_DIR, "screenshots")
    
    for screenshot in PACKAGE_CONTENTS["screenshots"]:
        screenshot_path = os.path.join(screenshots_dir, screenshot)
        
        # Create a placeholder text file for each screenshot
        with open(screenshot_path, 'w') as f:
            f.write(f"Placeholder for {screenshot} - Replace with actual screenshot\n")
            f.write(f"Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        print(f"  ✅ Created placeholder for {screenshot}")
    
    print("✅ Screenshot placeholders generated")

def create_readme():
    """Create the README file for the offline package."""
    print("Creating README file...")
    
    readme_content = """# NBA Stats Projections - Offline Demo Package

## Overview

This package contains all necessary files to conduct an offline demonstration of the NBA Stats Projections application. It is designed to be used in environments without internet access or as a backup in case of technical difficulties during the live demonstration.

## Package Contents

- **docs/**: Documentation files including demonstration guide, presentation materials, and FAQs
- **scripts/**: Scripts for setting up and running the demonstration environment
- **data/**: Sample data files for players, teams, and statistics
- **screenshots/**: Pre-captured screenshots of the application for reference
- **OFFLINE_DEMO_README.md**: This file

## Setup Instructions

1. Extract the package to a location with sufficient disk space
2. Ensure Python 3.8+ is installed on the system
3. Run the setup script: `python scripts/setup_demo_env.py --offline`
4. Start the simulated API server: `python scripts/start_api.py --offline`
5. Start the simulated frontend: `python scripts/start_frontend.py --offline`

## Offline Mode Features

When running in offline mode, the application will:
- Use pre-loaded sample data instead of fetching from a database
- Display static screenshots for dynamic content
- Simulate API calls with canned responses
- Show notification banners indicating offline status

## Demonstration Flow

1. **Introduction**: Use the presentation slides in docs/PRESENTATION_SLIDES.md
2. **Application Overview**: Reference the screenshots in the screenshots directory
3. **Feature Demonstration**: Follow the script in docs/DEMONSTRATION_SCRIPT.md
4. **Q&A Session**: Use the FAQs in docs/DEMONSTRATION_FAQ.md for common questions

## Fallback Plan

If the offline scripts cannot be executed:
1. Navigate to the screenshots directory
2. Present each screenshot with explanations from the demonstration script
3. Reference the documentation for detailed information

## Important Notes

- This package is self-contained and does not require internet access
- Replace placeholder screenshots with actual application screenshots before use
- Test the entire offline package before the demonstration
- Ensure all team members are familiar with the offline demonstration process

## Package Information

- Created: {timestamp}
- Version: 1.0
- Contact: NBA Stats Project Team
- Documentation: See files in docs/ directory

"""
    
    # Add timestamp
    readme_content = readme_content.replace("{timestamp}", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    # Write README file
    readme_path = os.path.join(OUTPUT_DIR, README_FILE)
    with open(readme_path, 'w') as f:
        f.write(readme_content)
    
    print(f"✅ Created README file: {README_FILE}")

def create_zip_archive():
    """Create a ZIP archive of the offline package."""
    print("Creating ZIP archive of the package...")
    
    # Zip filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_filename = os.path.join(os.path.dirname(OUTPUT_DIR), f"nba_stats_offline_demo_{timestamp}.zip")
    
    # Create ZIP file
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(OUTPUT_DIR):
            for file in files:
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, os.path.dirname(OUTPUT_DIR))
                zipf.write(file_path, relative_path)
    
    print(f"✅ Created ZIP archive: {zip_filename}")
    print(f"   Size: {os.path.getsize(zip_filename) / (1024*1024):.2f} MB")
    
    return zip_filename

def create_manifest():
    """Create a manifest file with package contents."""
    print("Creating manifest file...")
    
    manifest = {
        "package_name": "NBA Stats Projections Offline Demo",
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "version": "1.0",
        "contents": {
            "documentation": PACKAGE_CONTENTS["docs"],
            "scripts": PACKAGE_CONTENTS["scripts"],
            "sample_data": PACKAGE_CONTENTS["data"],
            "screenshots": PACKAGE_CONTENTS["screenshots"]
        },
        "instructions": "See OFFLINE_DEMO_README.md for usage instructions"
    }
    
    # Write manifest file
    manifest_path = os.path.join(OUTPUT_DIR, "manifest.json")
    with open(manifest_path, 'w') as f:
        json.dump(manifest, f, indent=4)
    
    print(f"✅ Created manifest file: manifest.json")

def main():
    """Main function to create the offline demo package."""
    print(f"Starting offline demo package creation at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Output directory: {OUTPUT_DIR}")
    
    # Create package components
    create_directory_structure()
    time.sleep(0.5)  # Small delay for better output readability
    
    copy_documentation()
    time.sleep(0.5)
    
    copy_scripts()
    time.sleep(0.5)
    
    copy_sample_data()
    time.sleep(0.5)
    
    generate_screenshots()
    time.sleep(0.5)
    
    create_readme()
    time.sleep(0.5)
    
    create_manifest()
    time.sleep(0.5)
    
    zip_file = create_zip_archive()
    
    # Summary
    print("\n" + "="*50)
    print("Offline Demo Package Creation Complete!")
    print("="*50)
    print(f"Package location: {OUTPUT_DIR}")
    print(f"ZIP archive: {zip_file}")
    print("\nNext Steps:")
    print("1. Replace screenshot placeholders with actual screenshots")
    print("2. Test the offline package on a clean system")
    print("3. Distribute the package to team members for the demonstration")
    print("4. Include the ZIP archive in backup materials")

if __name__ == "__main__":
    main() 